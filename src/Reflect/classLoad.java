package Reflect;

public class classLoad {
    public static void main(String[] args) {
        //类加载机制
        //静态加载：编译时加载相关的类，依赖性太强
        //动态加载：运行时加载相关的类，没运行不需要该类，降低了依赖性


        //例如：因为new Dog()是静态记载，必须编写Dog类
        //Class cls = Class.forName("person")
        //动态记载可能会报错


        //类加载
        //阶段1：加载
        //JVM在该阶段主要目的是将字节码从不同数据源转换成二进制字节流加载到内存当中，生成一个代表该类的java.lang.Class对象

        //阶段2：
        //验证：保证Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全
        //准备：JVM在该阶段对静态变量，分配内存进行默认初始化
        //解析：将常量池的符号引用转换为直接引用的过程

        //阶段3：初始化
        //执行<clinit>()方法，是按语句在源文件出现的顺序，依次自动收集类中的静态变量的赋值动作和静态代码块中的语句，进行合并
        //虚拟机汇报整一个类的<clinit>()方法在多线程环境中被正确的加锁，同步，如果多线程同时去初始化一个类，必然有一个县城去执行这个类的
        //<clinit>()方法，其他线程需要阻塞等待，直到执行完毕

    }
}
